{"ast":null,"code":"import { UserServiceClient } from '../proto/user/user_grpc_web_pb';\nimport { BusinessServiceClient } from '../proto/business/business_grpc_web_pb';\nimport { BeneficiaryServiceClient } from '../proto/beneficiary/beneficiary_grpc_web_pb';\nimport { grpcEndpoint } from './apiUrls';\nclass GrpcService {\n  constructor() {\n    this.userClient = new UserServiceClient(grpcEndpoint, null, null);\n    this.businessClient = new BusinessServiceClient(grpcEndpoint, null, null);\n    this.beneficiaryClient = new BeneficiaryServiceClient(grpcEndpoint, null, null);\n  }\n  getMetadata(token) {\n    const metadata = {};\n    if (token) {\n      metadata['authorization'] = `Bearer ${token}`;\n    }\n    return metadata;\n  }\n\n  // User Service Methods\n  getUserByEmail(email, token) {\n    const {\n      GetUserRequest\n    } = require('../proto/user/user_pb');\n    const request = new GetUserRequest();\n    request.setEmail(email);\n    return new Promise((resolve, reject) => {\n      this.userClient.getUser(request, this.getMetadata(token), (err, response) => {\n        if (err) {\n          reject(err);\n        } else {\n          const errors = response.getErrorsList();\n          if (errors && errors.length > 0) {\n            reject(new Error(errors.map(e => e.getMessage()).join(', ')));\n          } else {\n            resolve(response);\n          }\n        }\n      });\n    });\n  }\n  createUser(email, userType, mailingListSignup, token) {\n    const {\n      CreateUserRequest\n    } = require('../proto/user/user_pb');\n    const request = new CreateUserRequest();\n    request.setEmail(email);\n    request.setUserType(userType);\n    request.setMailingListSignup(mailingListSignup);\n    return new Promise((resolve, reject) => {\n      this.userClient.createUser(request, this.getMetadata(token), (err, response) => {\n        if (err) {\n          reject(err);\n        } else {\n          const errors = response.getErrorsList();\n          if (errors && errors.length > 0) {\n            reject(new Error(errors.map(e => e.getMessage()).join(', ')));\n          } else {\n            resolve(response);\n          }\n        }\n      });\n    });\n  }\n\n  // Business Service Methods\n  createBusiness(businessData, token) {\n    const {\n      CreateBusinessRequest\n    } = require('../proto/business/business_pb');\n    const request = new CreateBusinessRequest();\n    request.setBusinessName(businessData.businessName || '');\n    request.setEmail(businessData.email || '');\n    request.setWebsiteUrl(businessData.website || '');\n    request.setPhoneNumber(businessData.phoneNumber || '');\n    request.setLocationCity(businessData.locationCity || '');\n    request.setLocationState(businessData.locationState || '');\n    request.setEin(businessData.ein || '');\n    request.setBusinessDescription(businessData.businessDescription || '');\n    request.setBusinessSize(businessData.businessSize || '');\n    request.setUserEmail(businessData.userEmail || '');\n    return new Promise((resolve, reject) => {\n      this.businessClient.createBusiness(request, this.getMetadata(token), (err, response) => {\n        if (err) {\n          reject(err);\n        } else {\n          const errors = response.getErrorsList();\n          if (errors && errors.length > 0) {\n            reject(new Error(errors.map(e => e.getMessage()).join(', ')));\n          } else {\n            resolve(response);\n          }\n        }\n      });\n    });\n  }\n\n  // Beneficiary Service Methods\n  createBeneficiary(beneficiaryData, token) {\n    const {\n      CreateBeneficiaryRequest\n    } = require('../proto/beneficiary/beneficiary_pb');\n    const request = new CreateBeneficiaryRequest();\n    request.setBeneficiaryName(beneficiaryData.beneficiaryName || '');\n    request.setEmail(beneficiaryData.email || '');\n    request.setWebsiteUrl(beneficiaryData.website || '');\n    request.setPhoneNumber(beneficiaryData.phoneNumber || '');\n    request.setLocationCity(beneficiaryData.locationCity || '');\n    request.setLocationState(beneficiaryData.locationState || '');\n    request.setEin(beneficiaryData.ein || '');\n    request.setBeneficiaryDescription(beneficiaryData.beneficiaryDescription || '');\n    request.setBeneficiarySize(beneficiaryData.beneficiarySize || '');\n    request.setUserEmail(beneficiaryData.userEmail || '');\n    return new Promise((resolve, reject) => {\n      this.beneficiaryClient.createBeneficiary(request, this.getMetadata(token), (err, response) => {\n        if (err) {\n          reject(err);\n        } else {\n          const errors = response.getErrorsList();\n          if (errors && errors.length > 0) {\n            reject(new Error(errors.map(e => e.getMessage()).join(', ')));\n          } else {\n            resolve(response);\n          }\n        }\n      });\n    });\n  }\n}\n\n// Create and export singleton instance\nconst grpcServiceInstance = new GrpcService();\nexport { grpcServiceInstance as grpcService };","map":{"version":3,"names":["UserServiceClient","BusinessServiceClient","BeneficiaryServiceClient","grpcEndpoint","GrpcService","constructor","userClient","businessClient","beneficiaryClient","getMetadata","token","metadata","getUserByEmail","email","GetUserRequest","require","request","setEmail","Promise","resolve","reject","getUser","err","response","errors","getErrorsList","length","Error","map","e","getMessage","join","createUser","userType","mailingListSignup","CreateUserRequest","setUserType","setMailingListSignup","createBusiness","businessData","CreateBusinessRequest","setBusinessName","businessName","setWebsiteUrl","website","setPhoneNumber","phoneNumber","setLocationCity","locationCity","setLocationState","locationState","setEin","ein","setBusinessDescription","businessDescription","setBusinessSize","businessSize","setUserEmail","userEmail","createBeneficiary","beneficiaryData","CreateBeneficiaryRequest","setBeneficiaryName","beneficiaryName","setBeneficiaryDescription","beneficiaryDescription","setBeneficiarySize","beneficiarySize","grpcServiceInstance","grpcService"],"sources":["C:/Users/battu/Downloads/new_version/registration-flow-client/src/api/grpcService.js"],"sourcesContent":["import { UserServiceClient } from '../proto/user/user_grpc_web_pb';\nimport { BusinessServiceClient } from '../proto/business/business_grpc_web_pb';\nimport { BeneficiaryServiceClient } from '../proto/beneficiary/beneficiary_grpc_web_pb';\nimport { grpcEndpoint } from './apiUrls';\n\nclass GrpcService {\n  constructor() {\n    this.userClient = new UserServiceClient(grpcEndpoint, null, null);\n    this.businessClient = new BusinessServiceClient(grpcEndpoint, null, null);\n    this.beneficiaryClient = new BeneficiaryServiceClient(grpcEndpoint, null, null);\n  }\n\n  getMetadata(token) {\n    const metadata = {};\n    if (token) {\n      metadata['authorization'] = `Bearer ${token}`;\n    }\n    return metadata;\n  }\n\n  // User Service Methods\n  getUserByEmail(email, token) {\n    const { GetUserRequest } = require('../proto/user/user_pb');\n    const request = new GetUserRequest();\n    request.setEmail(email);\n\n    return new Promise((resolve, reject) => {\n      this.userClient.getUser(request, this.getMetadata(token), (err, response) => {\n        if (err) {\n          reject(err);\n        } else {\n          const errors = response.getErrorsList();\n          if (errors && errors.length > 0) {\n            reject(new Error(errors.map(e => e.getMessage()).join(', ')));\n          } else {\n            resolve(response);\n          }\n        }\n      });\n    });\n  }\n\n  createUser(email, userType, mailingListSignup, token) {\n    const { CreateUserRequest } = require('../proto/user/user_pb');\n    const request = new CreateUserRequest();\n    request.setEmail(email);\n    request.setUserType(userType);\n    request.setMailingListSignup(mailingListSignup);\n\n    return new Promise((resolve, reject) => {\n      this.userClient.createUser(request, this.getMetadata(token), (err, response) => {\n        if (err) {\n          reject(err);\n        } else {\n          const errors = response.getErrorsList();\n          if (errors && errors.length > 0) {\n            reject(new Error(errors.map(e => e.getMessage()).join(', ')));\n          } else {\n            resolve(response);\n          }\n        }\n      });\n    });\n  }\n\n  // Business Service Methods\n  createBusiness(businessData, token) {\n    const { CreateBusinessRequest } = require('../proto/business/business_pb');\n    const request = new CreateBusinessRequest();\n    \n    request.setBusinessName(businessData.businessName || '');\n    request.setEmail(businessData.email || '');\n    request.setWebsiteUrl(businessData.website || '');\n    request.setPhoneNumber(businessData.phoneNumber || '');\n    request.setLocationCity(businessData.locationCity || '');\n    request.setLocationState(businessData.locationState || '');\n    request.setEin(businessData.ein || '');\n    request.setBusinessDescription(businessData.businessDescription || '');\n    request.setBusinessSize(businessData.businessSize || '');\n    request.setUserEmail(businessData.userEmail || '');\n\n    return new Promise((resolve, reject) => {\n      this.businessClient.createBusiness(request, this.getMetadata(token), (err, response) => {\n        if (err) {\n          reject(err);\n        } else {\n          const errors = response.getErrorsList();\n          if (errors && errors.length > 0) {\n            reject(new Error(errors.map(e => e.getMessage()).join(', ')));\n          } else {\n            resolve(response);\n          }\n        }\n      });\n    });\n  }\n\n  // Beneficiary Service Methods\n  createBeneficiary(beneficiaryData, token) {\n    const { CreateBeneficiaryRequest } = require('../proto/beneficiary/beneficiary_pb');\n    const request = new CreateBeneficiaryRequest();\n    \n    request.setBeneficiaryName(beneficiaryData.beneficiaryName || '');\n    request.setEmail(beneficiaryData.email || '');\n    request.setWebsiteUrl(beneficiaryData.website || '');\n    request.setPhoneNumber(beneficiaryData.phoneNumber || '');\n    request.setLocationCity(beneficiaryData.locationCity || '');\n    request.setLocationState(beneficiaryData.locationState || '');\n    request.setEin(beneficiaryData.ein || '');\n    request.setBeneficiaryDescription(beneficiaryData.beneficiaryDescription || '');\n    request.setBeneficiarySize(beneficiaryData.beneficiarySize || '');\n    request.setUserEmail(beneficiaryData.userEmail || '');\n\n    return new Promise((resolve, reject) => {\n      this.beneficiaryClient.createBeneficiary(request, this.getMetadata(token), (err, response) => {\n        if (err) {\n          reject(err);\n        } else {\n          const errors = response.getErrorsList();\n          if (errors && errors.length > 0) {\n            reject(new Error(errors.map(e => e.getMessage()).join(', ')));\n          } else {\n            resolve(response);\n          }\n        }\n      });\n    });\n  }\n}\n\n// Create and export singleton instance\nconst grpcServiceInstance = new GrpcService();\nexport { grpcServiceInstance as grpcService };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
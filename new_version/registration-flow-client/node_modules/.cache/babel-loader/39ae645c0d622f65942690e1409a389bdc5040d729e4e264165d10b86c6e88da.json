{"ast":null,"code":"import { grpcService } from \"./grpcService\";\nimport { getAccessJwtFromStorage } from \"../user-auth/authenticateUser\";\nexport class RegistrationApiService {\n  constructor() {\n    this.grpcService = grpcService;\n  }\n\n  /**\r\n   * Register a business entity\r\n   */\n  async registerBusiness(businessRegistrationDto, onSuccess, onError) {\n    try {\n      const token = getAccessJwtFromStorage();\n\n      // ‚úÖ FIXED: Access data from the deeply nested structure\n      const profile = businessRegistrationDto.registration.profile;\n      const user = businessRegistrationDto.user;\n\n      // Map the DTO to gRPC format\n      const businessData = {\n        businessName: profile.name,\n        email: profile.email,\n        website: profile.website || '',\n        phoneNumber: profile.phone || '',\n        locationCity: profile.location.city,\n        locationState: profile.location.state,\n        ein: '',\n        // Not in form yet\n        businessDescription: '',\n        // Not in form yet\n        businessSize: profile.size,\n        userEmail: user.email\n      };\n      console.log('üì§ Registering business via gRPC:', businessData);\n      const response = await this.grpcService.createBusiness(businessData, token);\n\n      // Convert gRPC response to format expected by frontend\n      const business = response.getBusiness();\n      const jsonResponse = {\n        data: {\n          id: business.getId(),\n          type: 'business',\n          attributes: {\n            businessName: business.getBusinessName(),\n            email: business.getEmail(),\n            websiteUrl: business.getWebsiteUrl(),\n            phoneNumber: business.getPhoneNumber(),\n            locationCity: business.getLocationCity(),\n            locationState: business.getLocationState(),\n            ein: business.getEin(),\n            businessDescription: business.getBusinessDescription(),\n            businessSize: business.getBusinessSize()\n          }\n        }\n      };\n      console.log('‚úÖ Business registered successfully:', jsonResponse);\n      if (onSuccess) {\n        onSuccess(jsonResponse);\n      }\n      return jsonResponse;\n    } catch (error) {\n      console.error('‚ùå Business registration failed:', error);\n      if (onError) {\n        onError(error);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  /**\r\n   * Register a beneficiary entity\r\n   */\n  async registerBeneficiary(beneficiaryRegistrationDto, onSuccess, onError) {\n    try {\n      const token = getAccessJwtFromStorage();\n\n      // ‚úÖ FIXED: Access data from the correct nested structure\n      const registration = beneficiaryRegistrationDto.registration;\n      const user = beneficiaryRegistrationDto.user;\n\n      // Map the DTO to gRPC format\n      const beneficiaryData = {\n        beneficiaryName: registration.name,\n        // ‚úÖ Changed from beneficiaryRegistrationDto.entityName\n        email: registration.email,\n        // ‚úÖ Changed from beneficiaryRegistrationDto.email\n        website: registration.website,\n        // ‚úÖ Changed from beneficiaryRegistrationDto.websiteUrl\n        phoneNumber: registration.phoneNumber,\n        // ‚úÖ Changed from beneficiaryRegistrationDto.phoneNumber\n        locationCity: registration.locationCity,\n        // ‚úÖ Changed from beneficiaryRegistrationDto.locationCity\n        locationState: registration.locationState,\n        // ‚úÖ Changed from beneficiaryRegistrationDto.locationState\n        ein: registration.ein || '',\n        beneficiaryDescription: registration.description || '',\n        beneficiarySize: registration.entitySize,\n        // ‚úÖ Changed from beneficiaryRegistrationDto.entitySize\n        userEmail: user.email // ‚úÖ Changed from beneficiaryRegistrationDto.userEmail\n      };\n      console.log('üì§ Registering beneficiary via gRPC:', beneficiaryData);\n      const response = await this.grpcService.createBeneficiary(beneficiaryData, token);\n\n      // Convert gRPC response to format expected by frontend\n      const beneficiary = response.getBeneficiary();\n      const jsonResponse = {\n        data: {\n          id: beneficiary.getId(),\n          type: 'beneficiary',\n          attributes: {\n            beneficiaryName: beneficiary.getBeneficiaryName(),\n            email: beneficiary.getEmail(),\n            websiteUrl: beneficiary.getWebsiteUrl(),\n            phoneNumber: beneficiary.getPhoneNumber(),\n            locationCity: beneficiary.getLocationCity(),\n            locationState: beneficiary.getLocationState(),\n            ein: beneficiary.getEin(),\n            beneficiaryDescription: beneficiary.getBeneficiaryDescription(),\n            beneficiarySize: beneficiary.getBeneficiarySize()\n          }\n        }\n      };\n      console.log('‚úÖ Beneficiary registered successfully:', jsonResponse);\n      if (onSuccess) {\n        onSuccess(jsonResponse);\n      }\n      return jsonResponse;\n    } catch (error) {\n      console.error('‚ùå Beneficiary registration failed:', error);\n      if (onError) {\n        onError(error);\n      } else {\n        throw error;\n      }\n    }\n  }\n}","map":{"version":3,"names":["grpcService","getAccessJwtFromStorage","RegistrationApiService","constructor","registerBusiness","businessRegistrationDto","onSuccess","onError","token","profile","registration","user","businessData","businessName","name","email","website","phoneNumber","phone","locationCity","location","city","locationState","state","ein","businessDescription","businessSize","size","userEmail","console","log","response","createBusiness","business","getBusiness","jsonResponse","data","id","getId","type","attributes","getBusinessName","getEmail","websiteUrl","getWebsiteUrl","getPhoneNumber","getLocationCity","getLocationState","getEin","getBusinessDescription","getBusinessSize","error","registerBeneficiary","beneficiaryRegistrationDto","beneficiaryData","beneficiaryName","beneficiaryDescription","description","beneficiarySize","entitySize","createBeneficiary","beneficiary","getBeneficiary","getBeneficiaryName","getBeneficiaryDescription","getBeneficiarySize"],"sources":["C:/Users/battu/Downloads/new_version/registration-flow-client/src/api/registrationApiService.js"],"sourcesContent":["import { grpcService } from \"./grpcService\";\r\nimport { getAccessJwtFromStorage } from \"../user-auth/authenticateUser\";\r\n\r\nexport class RegistrationApiService {\r\n  constructor() {\r\n    this.grpcService = grpcService;\r\n  }\r\n\r\n  /**\r\n   * Register a business entity\r\n   */\r\n  async registerBusiness(businessRegistrationDto, onSuccess, onError) {\r\n    try {\r\n      const token = getAccessJwtFromStorage();\r\n      \r\n      // ‚úÖ FIXED: Access data from the deeply nested structure\r\n      const profile = businessRegistrationDto.registration.profile;\r\n      const user = businessRegistrationDto.user;\r\n      \r\n      // Map the DTO to gRPC format\r\n      const businessData = {\r\n        businessName: profile.name,\r\n        email: profile.email,\r\n        website: profile.website || '',\r\n        phoneNumber: profile.phone || '',\r\n        locationCity: profile.location.city,\r\n        locationState: profile.location.state,\r\n        ein: '',  // Not in form yet\r\n        businessDescription: '',  // Not in form yet\r\n        businessSize: profile.size,\r\n        userEmail: user.email\r\n      };\r\n\r\n      console.log('üì§ Registering business via gRPC:', businessData);\r\n\r\n      const response = await this.grpcService.createBusiness(businessData, token);\r\n      \r\n      // Convert gRPC response to format expected by frontend\r\n      const business = response.getBusiness();\r\n      const jsonResponse = {\r\n        data: {\r\n          id: business.getId(),\r\n          type: 'business',\r\n          attributes: {\r\n            businessName: business.getBusinessName(),\r\n            email: business.getEmail(),\r\n            websiteUrl: business.getWebsiteUrl(),\r\n            phoneNumber: business.getPhoneNumber(),\r\n            locationCity: business.getLocationCity(),\r\n            locationState: business.getLocationState(),\r\n            ein: business.getEin(),\r\n            businessDescription: business.getBusinessDescription(),\r\n            businessSize: business.getBusinessSize()\r\n          }\r\n        }\r\n      };\r\n\r\n      console.log('‚úÖ Business registered successfully:', jsonResponse);\r\n\r\n      if (onSuccess) {\r\n        onSuccess(jsonResponse);\r\n      }\r\n      return jsonResponse;\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Business registration failed:', error);\r\n      if (onError) {\r\n        onError(error);\r\n      } else {\r\n        throw error;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register a beneficiary entity\r\n   */\r\n  async registerBeneficiary(beneficiaryRegistrationDto, onSuccess, onError) {\r\n    try {\r\n      const token = getAccessJwtFromStorage();\r\n      \r\n      // ‚úÖ FIXED: Access data from the correct nested structure\r\n      const registration = beneficiaryRegistrationDto.registration;\r\n      const user = beneficiaryRegistrationDto.user;\r\n      \r\n      // Map the DTO to gRPC format\r\n      const beneficiaryData = {\r\n        beneficiaryName: registration.name,           // ‚úÖ Changed from beneficiaryRegistrationDto.entityName\r\n        email: registration.email,                    // ‚úÖ Changed from beneficiaryRegistrationDto.email\r\n        website: registration.website,                // ‚úÖ Changed from beneficiaryRegistrationDto.websiteUrl\r\n        phoneNumber: registration.phoneNumber,        // ‚úÖ Changed from beneficiaryRegistrationDto.phoneNumber\r\n        locationCity: registration.locationCity,      // ‚úÖ Changed from beneficiaryRegistrationDto.locationCity\r\n        locationState: registration.locationState,    // ‚úÖ Changed from beneficiaryRegistrationDto.locationState\r\n        ein: registration.ein || '',\r\n        beneficiaryDescription: registration.description || '',\r\n        beneficiarySize: registration.entitySize,     // ‚úÖ Changed from beneficiaryRegistrationDto.entitySize\r\n        userEmail: user.email                         // ‚úÖ Changed from beneficiaryRegistrationDto.userEmail\r\n      };\r\n\r\n      console.log('üì§ Registering beneficiary via gRPC:', beneficiaryData);\r\n\r\n      const response = await this.grpcService.createBeneficiary(beneficiaryData, token);\r\n      \r\n      // Convert gRPC response to format expected by frontend\r\n      const beneficiary = response.getBeneficiary();\r\n      const jsonResponse = {\r\n        data: {\r\n          id: beneficiary.getId(),\r\n          type: 'beneficiary',\r\n          attributes: {\r\n            beneficiaryName: beneficiary.getBeneficiaryName(),\r\n            email: beneficiary.getEmail(),\r\n            websiteUrl: beneficiary.getWebsiteUrl(),\r\n            phoneNumber: beneficiary.getPhoneNumber(),\r\n            locationCity: beneficiary.getLocationCity(),\r\n            locationState: beneficiary.getLocationState(),\r\n            ein: beneficiary.getEin(),\r\n            beneficiaryDescription: beneficiary.getBeneficiaryDescription(),\r\n            beneficiarySize: beneficiary.getBeneficiarySize()\r\n          }\r\n        }\r\n      };\r\n\r\n      console.log('‚úÖ Beneficiary registered successfully:', jsonResponse);\r\n\r\n      if (onSuccess) {\r\n        onSuccess(jsonResponse);\r\n      }\r\n      return jsonResponse;\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Beneficiary registration failed:', error);\r\n      if (onError) {\r\n        onError(error);\r\n      } else {\r\n        throw error;\r\n      }\r\n    }\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}